import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.7.10' apply false
    id 'org.jetbrains.kotlin.plugin.lombok' version '1.7.10' apply false
    id 'io.freefair.lombok' version '6.5.1' apply false
    id 'org.springframework.boot' version '2.7.4' apply false
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.10' apply false
}

ext {
    slf4jVersion = '2.0.3'
}

subprojects {
    group 'nxcloud.foundation'
    version '1.0-SNAPSHOT'

    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    apply plugin: 'org.jetbrains.kotlin.plugin.lombok'
    apply plugin: 'io.freefair.lombok'

    repositories {
        mavenCentral()
    }

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'idea'

    dependencyManagement {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
            cacheDynamicVersionsFor 0, 'seconds'
        }

        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }

        dependencies {
            dependency "org.slf4j:slf4j-api:${slf4jVersion}"
        }
    }

    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        implementation 'org.jetbrains.kotlin:kotlin-stdlib'
        implementation 'org.slf4j:slf4j-api'
    }

    test {
        useJUnitPlatform()
    }

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    tasks.compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }

    tasks.compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
        }
    }
}